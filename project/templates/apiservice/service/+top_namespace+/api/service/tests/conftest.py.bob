# -*- coding: utf-8 -*-
"""
PyTest Fixtures to aid in REST API validation. The test_server fixture will
run a test instance which can by the used to run tests.

"""
import os
import sys
import uuid
import logging
import StringIO
import tempfile
import subprocess
import ConfigParser
from string import Template
from pkg_resources import resource_string

import pytest
from evasion.common import net
from pp.auth import pwtools
from pp.user.validate import userdata
from pp.apiaccesstoken.tokenmanager import Manager
from pp.user.service.tests.conftest import mongodb
from pp.user.service.tests.conftest import user_svc


def get_log(e=None):
    return logging.getLogger("{0}.{1}".format(__name__, e) if e else __name__)


class ServerRunner(object):
    """Start/Stop the testserver for web testing purposes.

    """
    def __init__(self, config={}):
        """
        """
        self.log = get_log("ServerRunner")
        self.serverPid = None
        self.serverProcess = None

        self.port = int(config.get('port', net.get_free_port()))
        self.interface = config.get('interface', '127.0.0.1')
        self.userservice_uri = config.get('userservice_uri')

        self.URI = "http://%s:%s" % (self.interface, self.port)

        # Make directory to put file and other data into:
        self.test_dir = tempfile.mkdtemp()
        self.log.info("Test Server temp directory <%s>" % self.test_dir)

        # Get template in the tests dir:
        self.temp_config = os.path.join(self.test_dir, 'test_cfg.ini')

        # The service to run with the rendered configuration:
        self.cmd = "pserve {}".format(self.temp_config)

        self.test_cfg = resource_string(__name__, 'test_cfg.ini.template')
        cfg_tmpl = Template(self.test_cfg)
        data = dict(
            interface=self.interface,
            port=self.port,
            userservice_uri=self.userservice_uri,
        )
        self.log.info('ServerRunner template config: {}'.format(data))
        data = cfg_tmpl.substitute(data)

        # print "data:"
        # print data
        # print

        with open(self.temp_config, "wb") as fd:
            fd.write(data)
        self.config = ConfigParser.ConfigParser()
        self.config.readfp(StringIO.StringIO(data))

        config = ConfigParser.ConfigParser(dict(here=self.test_dir))
        self.log.info("Setting up common db from <%s>" % self.temp_config)
        config.read(self.temp_config)

    def cleanup(self):
        """Clean up temp files and directories.
        """
        for f in [self.temp_config]:
            try:
                os.remove(f)
            except OSError:
                os.system('rm {}'.format(f))
        try:
            os.removedirs(self.test_dir)
        except OSError:
            os.system('rm -rf {}'.format(self.test_dir))

    def start(self):
        """Spawn the web app in testserver mode.

        After spawning the web app this method will wait
        for the web app to respond to normal requests.

        """
        self.log.info(
            "start: running <%s> in <%s>." % (self.cmd, self.test_dir)
        )

        # Spawn as a process and then wait until
        # the web server is ready to accept requests.
        #
        self.serverProcess = subprocess.Popen(
            args=self.cmd,
            shell=True,
            cwd=self.test_dir,
        )
        pid = self.serverProcess.pid

        if not self.isRunning():
            raise SystemError("%s did not start!" % self.cmd)

        #self.log.debug("start: waiting for '%s' readiness." % self.URI)
        net.wait_for_ready(self.URI + "/ping", timeout=2)

        return pid

    def stop(self):
        """Stop the server running."""
        self.log.info("stop: STOPPING Server.")

        # Stop:
        if self.isRunning():
            self.serverProcess.terminate()
            os.waitpid(self.serverProcess.pid, 0)

        # Make sure its actually stopped:
        if sys.platform.startswith('win'):
            subprocess.call(
                args="taskkill /F /T /IM pserve.exe",
                shell=True,
            )
        else:
            subprocess.call(
                args=(
                    'ps -a | grep -v grep | grep "pserve*" '
                    '| awk \'{print "kill -15 "$1}\' | sh'
                ),
                shell=True,
            )

    def isRunning(self):
        """Called to testserver

        returned:
            True - its running.
            False - its not running.

        """
        returned = False
        process = self.serverProcess

        if process and process.poll() is None:
            returned = True

        return returned


@pytest.fixture(scope='function')
def test_server(request):
    """Pytest fixture to run a test instance of the service.

    """
    log = get_log("server")

    usrsvc = request.getfuncargvalue('user_svc')

    test_server = ServerRunner(dict(
        # the server should only bind to localhost. The port will be auto
        # allocated.
        interface='127.0.0.1',
        userservice_uri='http://{}:{}/'.format(usrsvc.interface, usrsvc.port),
    ))

    # Set up the client side rest api and set it up with the URI of the
    # running test service.
    from {{{top_namespace}}}.api.client.rest import APIService

    log.debug("server: setting up REST client API for URI '{}'.".format(
        test_server.URI
    ))

    # Attach to the server object:
    test_server.api = APIService(uri=test_server.URI)

    def teardown():
        """Stop running the test instance."""
        log.debug("teardown: '{}' stopping instance.".format(test_server.URI))
        test_server.stop()
        test_server.cleanup()
        log.debug("teardown: '{}' stop and cleanup called OK.".format(
            test_server.URI
        ))

    request.addfinalizer(teardown)

    log.debug("server: starting instance.")
    test_server.start()

    # Add a reference that is *only* going to be present during testing.
    test_server.user_svc = usrsvc

    return test_server


@pytest.fixture(scope='function')
def user_bob(request):
    """Create a new user called bob in the user service ready for testing.

    This will randomly generate a password string as well as creating valid
    access and secret tokens.

    :returns: a dict.

    E.g.::

        test_setup = {
            "user": result of user service get for the username,
            "auth": {
                "password": random hex string for passwo{{{top_namespace}}}.
                "access_token": valid access token string.
            }
        }

    The user service get for username 'bob' which has been loaded.

    """
    log = get_log("user_bob")

    usersvc = request.getfuncargvalue('user_svc')
    usersvc.api.ping()

    log.debug("User Service ping OK: '{}'".format(usersvc.URI))

    username = 'bob'

    log.debug("new access secret and token for '{}'".format(username))
    secret = Manager.generate_secret()
    access = Manager(secret).generate_access_token(identity=username)

    password = os.urandom(8).encode('hex')

    data = {
        "username": username,
        "tokens": {
            access: {
                "access_secret": secret
            }
        },
        "display_name": u"Bobby Plácido Bolívar",
        "phone": "12121212",
        "email": "bob@example.com",
        "password_hash": pwtools.hash_password(password),
        "_id": "user-2719963b00964c01b42b5d81c998fd05",
    }

    log.debug("removing user if present '{}'".format(username))
    try:
        usersvc.api.user.remove(username)
    except userdata.UserServiceError:
        # user not present to remove which is fine.
        pass

    log.debug("load new user data: {}".format(data))
    usersvc.api.load([data, ])

    log.debug("Recovering loaded user '{}'.".format(username))
    user = usersvc.api.user.get(username)

    test_setup = dict(
        user=user,
        auth=dict(
            password=password,
            access_token=access,
        )
    )

    return test_setup


@pytest.fixture(scope='session')
def logger(request):
    """Set up a root logger showing all entries in the console.
    """
    log = logging.getLogger()
    hdlr = logging.StreamHandler()
    fmt = '%(asctime)s %(name)s %(levelname)s %(message)s'
    formatter = logging.Formatter(fmt)
    hdlr.setFormatter(formatter)
    log.addHandler(hdlr)
    log.setLevel(logging.DEBUG)
    log.propagate = False

    return log
