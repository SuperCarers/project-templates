# -*- coding: utf-8 -*-
"""
Test the API access via tokens.

Oisin Mulvihill
2013-10-06

"""
import pytest
from pp.apiaccesstoken.tokenmanager import Manager

from {{{top_namespace}}}.api.client import error


def test_access_token_restriction(logger, user_bob, test_server):
    """Test the access to bob's details via the REST API which will require a
    valid access token.

    """
    bob = user_bob
    api = test_server.api
    api.ping()

    access_token2 = Manager(
        Manager.generate_secret()
    ).generate_access_token(identity='fred')

    print "user_bob auth details:", user_bob['auth']

    assert bob['user']['username'] == 'bob'

    # This is different from the user service user get. The api user
    # details won't contain sensitive fields like password hashs or tokens.

    # This will fail the first time as the token access has not yet been set
    # up.
    with pytest.raises(error.AccessTokenNotSet):
        api.user.details('bob')

    # set bobs access token:
    api.set_auth(bob['auth']['access_token'])

    def verify_details():
        rbob = api.user.details('bob')
        assert rbob['username'] == 'bob'
        assert rbob['display_name'] == u"Bobby Plácido Bolívar"
        assert rbob['phone'] == '12121212'
        assert rbob['email'] == 'bob@example.com'
        assert 'hash_password' not in rbob
        assert 'tokens' not in rbob

    verify_details()

    # Now try with login:
    #
    # Clear the access token and check:
    api.clear_auth()
    with pytest.raises(error.AccessTokenNotSet):
        api.user.details('bob')

    # login with the fixtures generated passwo{{{top_namespace}}}.
    api.login('bob', bob['auth']['password'])

    # Try access with an unknown access token
    api.set_auth(access_token2)

    # Access denied should happen:
    with pytest.raises(error.AccessDenied):
        verify_details()
