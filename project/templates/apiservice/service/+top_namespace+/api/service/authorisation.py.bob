# -*- coding: utf-8 -*-
"""
"""
import logging

from pyramid.httpexceptions import HTTPForbidden


def get_log(e=None):
    return logging.getLogger("{0}.{1}".format(__name__, e) if e else __name__)


def user_for_username(request, username=None):
    """Recover the user object for the matchdict 'username' field.
    """
    log = get_log("user_for_username")

    if not username:
        log.debug("looking for username in matchdict")
        if 'username' in request.matchdict:
            username = request.matchdict['username'].strip().lower()
        else:
            raise HTTPForbidden("No username found in matchdict.")

    log.debug("recovering details for <{0}>".format(username))
    details = request.user.api.user.get(username)

    log.debug("found details for <{0}>".format(username))
    return details


def user_for_login(request):
    """Recover the user object for the matchdict 'username' field.

    If no username was recovered from the environment then
    HTTPForbidden will be raised as a login is required.

    """
    log = get_log("user_for_login")

    log.debug("Looking for repoze.who.identity in environment")
    username = None
    if 'repoze.who.identity' in request.environ:
        identity = request.environ['repoze.who.identity']
        if 'repoze.who.userid' in identity:
            username = identity['repoze.who.userid']

    elif 'pp.api_access.identity' in request.environ:
        username = request.environ['pp.api_access.identity']

    if not username:
        raise HTTPForbidden()

    return user_for_username(request, username)
