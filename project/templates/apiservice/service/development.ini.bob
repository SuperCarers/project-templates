# String template processed prior to server start.
#
# Needs:
#
#   path_and_db, host, port
#
[app:main]
use = egg:pp-web-base

pyramid.reload_templates = true
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.debug_templates = false
pyramid.default_locale_name = en

# don't use as it screws JSON on exception handling: pyramid_debugtoolbar
pyramid.includes =
    pyramid_jinja2
    pyramid_beaker

pyramid.route_includes =
    {{{top_namespace}}}.api.service, /

pp.auth.site_name = '{{{top_namespace}}}-api-service'
pp.auth.cookie_name = auth_cookie
pp.auth.cookie_secret = secret-{{{random_string}}}
pp.auth.login_url = /login
pp.auth.login_handler_url = /login_handler

# Repoze plugin config
pp.auth.plugins =
    pp.auth.plugins.userservice

pp.auth.authenticators = userservice
pp.auth.mdproviders = userservice
pp.auth.userservice.uri = http://localhost:16801/
pp.user.uri = http://localhost:16801

# Beaker Sessions
session.type = memory
session.data_dir = %(here)s/data/sessions/data
session.lock_dir = %(here)s/data/sessions/lock
session.key = session-key-{{{random_string}}}
session.secret = session-secret-{{{random_string}}}
session.cookie_on_exception = true

# Beaker cache settings
cache.regions = default_term, second, short_term, long_term
cache.type = memory
cache.second.expire = 1
cache.short_term.expire = 60
cache.default_term.expire = 300
cache.long_term.expire = 3600

# Enable GraphitePusher sending stats to graphite (if its listening):
metrics.enabled = no
metrics.host = localhost
metrics.port = 2003
metrics.prefix = someservice
metrics.period = 60
metrics.allow = *

# database URI compatible with sqlalchemy
sqlalchemy.url = sqlite:///


[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = {{{tcp_port}}}

# Begin logging configuration

[loggers]
keys = root, {{{top_namespace}}}, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = DEBUG
handlers = console

[logger_{{{top_namespace}}}]
level = DEBUG
handlers =
qualname = {{{top_namespace}}}

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s

# End logging configuration
