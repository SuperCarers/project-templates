# -*- coding: utf-8 -*-
"""
Setuptools script for {{{top_namespace}}}-api-service ({{{top_namespace}}}.api.service)

"""
from setuptools import setup, find_packages

# Get the version from the source or the cached egg version:
import json
import ConfigParser
cp = ConfigParser.ConfigParser()
try:
    cp.read('../eggs_version.ini')
    version = dict(cp.items('default'))['version']
except:
    # inside and egg, read the cache version instead.
    with file("cached_version.json", "r") as fd:
        version = json.loads(fd.read())['egg_version']
else:
    # write out the version so its cached for in egg use:
    with file("cached_version.json", "w") as fd:
        fd.write(json.dumps(dict(egg_version=version)))

Name = '{{{top_namespace}}}-api-service'
ProjectUrl = ""
Version = version
Author = ''
AuthorEmail = 'everyone at pythonpro dot co dot uk'
Maintainer = ''
Summary = 'Pyramid REST Application for {{{top_namespace}}}-api-service'
License = ''
Description = Summary
ShortDescription = Summary

needed = [
    'sphinx',  # for docs generation.
    'nose',
    'evasion-common',
    'pp-auth',
    'pp-web-base',
    'pp-user-validate',
    'pp-user-client',
    'pp-apiaccesstoken',
    '{{{top_namespace}}}-api-model',
    '{{{top_namespace}}}-api-client',
]

test_needed = [
]

test_suite = '{{{top_namespace}}}.api.service.tests'

EagerResources = [
    '{{{top_namespace}}}',
]

ProjectScripts = [
]

PackageData = {
    '': ['*.*'],
}

EntryPoints = """
"""

setup(
    url=ProjectUrl,
    name=Name,
    zip_safe=False,
    version=Version,
    author=Author,
    author_email=AuthorEmail,
    description=ShortDescription,
    long_description=Description,
    classifiers=[
        "Programming Language :: Python",
        "Framework :: Pylons",
        "Topic :: Internet :: WWW/HTTP",
        "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    ],
    keywords='web wsgi bfg pylons pyramid',
    license=License,
    scripts=ProjectScripts,
    install_requires=needed,
    tests_require=test_needed,
    test_suite=test_suite,
    include_package_data=True,
    packages=find_packages(),
    package_data=PackageData,
    eager_resources=EagerResources,
    entry_points=EntryPoints,
    namespace_packages=['{{{top_namespace}}}', '{{{top_namespace}}}.api'],
)
